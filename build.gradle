plugins {
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.3"
	id 'org.quiltmc.gradle.licenser' version '1.+'

	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
}

archivesBaseName = project.archives_base_name
version = "$mod_version+build.$build_number-$project.minecraft_version-beta"
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/vampirelib.accesswidener")

	runs {
		datagenClient {
			client()
			name "Data Generation Client"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.existing-dir=${file("src/main/resources")}"
			vmArg "-Dfabric-api.datagen.strict_validation=false"

			ideConfigGenerated = true
			runDir "build/datagen"
		}
	}
}

// Include resources generated by data generators.
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url = "https://maven.fabricmc.net" }
	maven { url = "https://maven.quiltmc.org/repository/release/" }
	maven { url = "https://maven.quiltmc.org/repository/snapshot/" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://storage.googleapis.com/devan-maven/" }
	maven { url = "https://maven.parchmentmc.net/" }
	maven { url = "https://maven.terraformersmc.com/" }
	maven { url = "https://maven.siphalor.de" }
	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven {
		url = "https://jitpack.io"
		content {
			includeGroup("com.github.LlamaLad7")
		}
	}
}

dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		it.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-1.19.2:${libs.versions.parchment.get()}@zip")
		it.officialMojangMappings()
	}

	modImplementation libs.fabric.loader

	modImplementation (libs.bundles.fabric)

	modImplementation(libs.clothconfig)
	include(libs.clothconfig)

	modImplementation(libs.terraformwoodapi)
	include(libs.terraformwoodapi)
}

processResources {
	inputs.property "version", version

	filesMatching('fabric.mod.json') {
		expand "version": version
	}
}

java {
	withSourcesJar()
	withJavadocJar()
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	it.options.encoding = 'UTF-8'
	it.options.compilerArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
//	jvmArgs += "--enable-preview"
}

compileJava {
	options.compilerArgs += '--enable-preview'
}

jar {
	from('LICENSE') {
		rename {
			"${it}_$archivesBaseName"
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}

license {
	rule file('codeformat/HEADER')
	rule file("codeformat/FABRIC_MODIFIED_HEADER")
	rule file("codeformat/QUILT_MODIFIED_HEADER")
	include '**/*.java'
}

modrinth {
	token = MODRINTH_TOKEN
	projectId = "vampirelib"
	versionName = "VampireLib v${mod_version}+build.${build_number}-beta ($project.minecraft_version)"
	versionNumber = project.version
	versionType = this.getVersionType()
	uploadFile = tasks.remapJar
	gameVersions = ["1.19.1", "1.19.2"]
	loaders = ["quilt"]
	dependencies {
		required.project("qsl")
	}
	// Changelog fetching
	def changelogContent = fetchChangelog()

	if (changelogContent) {
		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getVersionType() {
	if (isMCVersionNonRelease() || version.contains("-alpha")) {
		return "alpha"
	} else if (version.contains("-beta")) {
		return "beta"
	} else {
		return "release"
	}
}

String fetchChangelog() {
	def changelogText = file('CHANGELOG.md').text
	def regexVersion = ((String) version).replace('.', '\\.').replace('+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}(?: - .+)?\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		String changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}

		return changelogContent
	} else {
		return null
	}
}
