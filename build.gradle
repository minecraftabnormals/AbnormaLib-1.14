plugins {
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	alias(libs.plugins.quilt.loom)
	alias(libs.plugins.loom.quiltflower)
	alias(libs.plugins.mappings.loom)
}

archivesBaseName = project.archives_base_name
version = "$mod_version+build.$build_number-${libs.versions.minecraft.get()}"
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/vampirelib.accesswidener")

	runs {
		datagenClient {
			client()
			name "Data Generation Client"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.existing-dir=${file("src/main/resources")}"
			vmArg "-Dfabric-api.datagen.strict_validation=false"

			ideConfigGenerated = true
			runDir "build/datagen"
		}
	}
}

// Include resources generated by data generators.
sourceSets {
	main {
		resources {
			srcDirs += [
				'src/main/generated'
			]
		}
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url = "https://maven.fabricmc.net" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://storage.googleapis.com/devan-maven/" }
	maven { url = "https://maven.parchmentmc.net/" }
	maven { url = "https://maven.terraformersmc.com/" }
	maven { url = "https://maven.siphalor.de" }
	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven {
		url = "https://jitpack.io"
		content {
			includeGroup("com.github.LlamaLad7")
		}
	}
}

dependencies {
	def noFapi = { exclude group: 'net.fabricmc.fabric-api' }
	def noFLoader = { exclude group: 'net.fabricmc' }

	minecraft libs.minecraft
	mappings loom.layered {
		it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2"))
		it.parchment("org.parchmentmc.data:parchment-1.18.2:2022.03.13@zip")
		it.officialMojangMappings {
			setNameSyntheticMembers(false)
		}
	}
	modImplementation(libs.quilt.loader) {
		noFLoader
	}

	modImplementation (libs.fabric.api) {
		force = true
		noFLoader
	}

	modImplementation(libs.clothconfig) {
		noFapi
		noFLoader
	}
	include(libs.clothconfig) {
		noFapi
		noFLoader
	}

	modImplementation(libs.artifice) {
		noFapi
		noFLoader
	}
	include(libs.artifice) {
		noFapi
		noFLoader
	}

	modImplementation(libs.terraformwoodapi) {
		noFapi
		noFLoader
	}
	include(libs.terraformwoodapi) {
		noFapi
		noFLoader
	}
	modImplementation(include("io.github.tropheusj:serialization-hooks:0.2.0+1.18.cb29164"))
}

processResources {
	inputs.property "version", version

	filesMatching('fabric.mod.json') {
		expand "version": version
	}
}

java {
	withSourcesJar()
	withJavadocJar()
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	it.options.encoding = 'UTF-8'
}

compileJava {
	options.compilerArgs += '--enable-preview'
}

jar {
	from('LICENSE') {
		rename {
			"${it}_$archivesBaseName"
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "C7pWNmLQ"
	versionNumber = project.version
	versionType = "beta"
	uploadFile = remapJar
	gameVersions = ["1.18.2"]
	dependencies {
		required.project "P7dR8mSH"
	}
}